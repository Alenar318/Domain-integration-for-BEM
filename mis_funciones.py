import numpy as np

# The integral of test function f(x,y,z)= 3x^2+y+z with respect to x is : g(x,y,z)= x^3+xy+xz , so 
# the analytical integration over a triangular element as a functions of its vertex coordinates may be obtained as: 
def funcion_analitica(a1, a2, a3, b1, b2, b3, c1, c2, c3):
    p1=(b1*c2 - b1*c3 - b2*c1 + b2*c3 + b3*c1 - b3*c2)*(6*a1**3 + 6*a1**2*a2 + 6*a1**2*a3 + 6*a1*a2**2 + 6*a1*a2*a3 + 6*a1*a3**2 + 10*a1*b1 + 5*a1*b2 + 5*a1*b3 + 10*a1*c1 + 5*a1*c2 + 5*a1*c3 + 6*a2**3 + 6*a2**2*a3 + 6*a2*a3**2 + 5*a2*b1 + 10*a2*b2 + 5*a2*b3 + 5*a2*c1 + 10*a2*c2 + 5*a2*c3 + 6*a3**3 + 5*a3*b1 + 5*a3*b2 + 10*a3*b3 + 5*a3*c1 + 5*a3*c2 + 10*a3*c3)/120;
    return p1


# The analytic integral of the antiderivative of the Polyharmonic RBF with respect to x over a triangular element as a
#  functions of its vertex coordinates  may be obtained as:
def integral_rbfx(a1, a2, a3, b1, b2, b3, c1, c2, c3, xi, yi, zi, u, v):
    # Mapping based on triangular baricentric coordinates
    x = a1 * (1 - u - v) + a2 * u + a3 * v
    y = b1 * (1 - u - v) + b2 * u + b3 * v
    z = c1 * (1 - u - v) + c2 * u + c3 * v
    p = x - xi
    q = np.sqrt((y - yi) ** 2 + (z - zi) ** 2)

    s1 = ((225 * p * q ** 4 + 150 * p ** 3 * q ** 2 + 45 * p ** 5) * np.log(q ** 2 + p ** 2) + 
          240 * np.arctan(p/q) * q ** 5 - 240 * p * q ** 4 - 70 * p ** 3 * q ** 2 - 18 * p ** 5) / 450
    return s1

# Numeric integration of the RBF centered at point "i"
def calculate_I_rbf_for_node(i, Qpoint, triangles, vertices, min_index, xw, NP):
    xi = Qpoint[i, 0]
    yi = Qpoint[i, 1]
    zi = Qpoint[i, 2]

    I1 = 0
    for tri in triangles:
        v1 = vertices[tri[0] - min_index]
        v2 = vertices[tri[1] - min_index]
        v3 = vertices[tri[2] - min_index]
        # Extracting vertex coordinates
        a1, b1, c1 = v1
        a2, b2, c2 = v2
        a3, b3, c3 = v3

        Jac_el = (-b1 + b2) * (-c1 + c3) - (-b1 + b3) * (-c1 + c2)

        for J3 in range(NP):
            psi = xw[J3, 0]
            eta = xw[J3, 1]
            W = xw[J3, 2]

            val = integral_rbfx(a1, a2, a3, b1, b2, b3, c1, c2, c3, xi, yi, zi, psi, eta)
            I1 += val * W * (0.5 * Jac_el)

    return i, I1

#  Triangular element quadrature

def TriGaussPoints(n):
    if n == 1:
        xw = np.array([[0.33333333333333, 0.33333333333333, 1.00000000000000]])
    elif n == 2:
        xw = np.array([
            [0.16666666666667, 0.16666666666667, 0.33333333333333],
            [0.16666666666667, 0.66666666666667, 0.33333333333333],
            [0.66666666666667, 0.16666666666667, 0.33333333333333]
        ])
    elif n == 3:
        xw = np.array([
            [0.33333333333333, 0.33333333333333, -0.56250000000000],
            [0.20000000000000, 0.20000000000000, 0.52083333333333],
            [0.20000000000000, 0.60000000000000, 0.52083333333333],
            [0.60000000000000, 0.20000000000000, 0.52083333333333]
        ])
    elif n == 4:
        xw = np.array([
            [0.44594849091597, 0.44594849091597, 0.22338158967801],
            [0.44594849091597, 0.10810301816807, 0.22338158967801],
            [0.10810301816807, 0.44594849091597, 0.22338158967801],
            [0.09157621350977, 0.09157621350977, 0.10995174365532],
            [0.09157621350977, 0.81684757298046, 0.10995174365532],
            [0.81684757298046, 0.09157621350977, 0.10995174365532]
        ])
    elif n == 5:
        xw = np.array([
            [0.33333333333333, 0.33333333333333, 0.22500000000000],
            [0.47014206410511, 0.47014206410511, 0.13239415278851],
            [0.47014206410511, 0.05971587178977, 0.13239415278851],
            [0.05971587178977, 0.47014206410511, 0.13239415278851],
            [0.10128650732346, 0.10128650732346, 0.12593918054483],
            [0.10128650732346, 0.79742698535309, 0.12593918054483],
            [0.79742698535309, 0.10128650732346, 0.12593918054483]
        ])
    elif n == 6:
        xw = np.array([
            [0.24928674517091, 0.24928674517091, 0.11678627572638],
            [0.24928674517091, 0.50142650965818, 0.11678627572638],
            [0.50142650965818, 0.24928674517091, 0.11678627572638],
            [0.06308901449150, 0.06308901449150, 0.05084490637021],
            [0.06308901449150, 0.87382197101700, 0.05084490637021],
            [0.87382197101700, 0.06308901449150, 0.05084490637021],
            [0.31035245103378, 0.63650249912140, 0.08285107561837],
            [0.63650249912140, 0.05314504984482, 0.08285107561837],
            [0.05314504984482, 0.31035245103378, 0.08285107561837],
            [0.63650249912140, 0.31035245103378, 0.08285107561837],
            [0.31035245103378, 0.05314504984482, 0.08285107561837],
            [0.05314504984482, 0.63650249912140, 0.08285107561837]
        ])
    elif n == 7:
        xw = np.array([
            [0.33333333333333, 0.33333333333333, -0.14957004446768],
            [0.26034596607904, 0.26034596607904, 0.17561525743321],
            [0.26034596607904, 0.47930806784192, 0.17561525743321],
            [0.47930806784192, 0.26034596607904, 0.17561525743321],
            [0.06513010290222, 0.06513010290222, 0.05334723560884],
            [0.06513010290222, 0.86973979419557, 0.05334723560884],
            [0.86973979419557, 0.06513010290222, 0.05334723560884],
            [0.31286549600487, 0.63844418856981, 0.07711376089026],
            [0.63844418856981, 0.04869031542532, 0.07711376089026],
            [0.04869031542532, 0.31286549600487, 0.07711376089026],
            [0.63844418856981, 0.31286549600487, 0.07711376089026],
            [0.31286549600487, 0.04869031542532, 0.07711376089026],
            [0.04869031542532, 0.63844418856981, 0.07711376089026]
        ])
    elif n == 8:
        xw = np.array([
            [0.33333333333333, 0.33333333333333, 0.14431560767779],
            [0.45929258829272, 0.45929258829272, 0.09509163426728],
            [0.45929258829272, 0.08141482341455, 0.09509163426728],
            [0.08141482341455, 0.45929258829272, 0.09509163426728],
            [0.17056930775176, 0.17056930775176, 0.10321737053472],
            [0.17056930775176, 0.65886138449648, 0.10321737053472],
            [0.65886138449648, 0.17056930775176, 0.10321737053472],
            [0.05054722831703, 0.05054722831703, 0.03245849762320],
            [0.05054722831703, 0.89890554336594, 0.03245849762320],
            [0.89890554336594, 0.05054722831703, 0.03245849762320],
            [0.26311282963464, 0.72849239295540, 0.02723031417443],
            [0.72849239295540, 0.00839477740996, 0.02723031417443],
            [0.00839477740996, 0.26311282963464, 0.02723031417443],
            [0.72849239295540, 0.26311282963464, 0.02723031417443],
            [0.26311282963464, 0.00839477740996, 0.02723031417443],
            [0.00839477740996, 0.72849239295540, 0.02723031417443]
        ])
    else:
        xw = np.array([])  # Empty array for unsupported 'n'
    
    return xw
